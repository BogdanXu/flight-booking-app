version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net
  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - kafka-net   
  booking-be:
    container_name: booking-be
    depends_on:
      - mongo_db
      - broker
    build:
      context: ../booking
      dockerfile: Dockerfile
    ports:
      - 8181:8080
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.data.mongodb.uri" : "mongodb://root:123456@mongo_db:27017/booking_db?authSource=admin",
          "spring.kafka.bootstrap-servers": "broker:9092"
        }'
    volumes:
      - booking-db:/data/db
      - .m2:/root/.m2
    stdin_open: true
    tty: true
    networks:
      - kafka-net
  mongo_db:
    image: mongo:latest
    restart: unless-stopped
    env_file: ../booking/.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - 7017:27017
    volumes:
      - mongo-db:/data/db
    networks:
      - kafka-net
  admin-postgres:
    image: postgres
    container_name: admin-postgres
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
    volumes:
      - admin-postgres-data:/var/lib/postgresql/data
    ports:
      - 5435:5432
    expose:
      - 5435
    networks:
      - kafka-net
  admin-be:
    container_name: admin-be
    build:
      context: ../admin
      dockerfile: Dockerfile
    depends_on:
      - admin-postgres
      - broker
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://admin-postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "broker:9092"
    links:
      - admin-postgres
    networks:
      - kafka-net
  payments-be:
    container_name: payments-be
    build:
      context: ../payments
      dockerfile: Dockerfile
    depends_on:
      - payments-mongo_db
      - broker
    ports:
      - 8089:8080
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://root:123456@mongo_db:27017/booking_db?authSource=admin"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "broker:9092"
    volumes:
      - payments-db:/data/db
    networks:
      - kafka-net
  payments-mongo_db:
    image: mongo:latest
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - 7018:27017
    volumes:
      - payments-db:/data/db
    networks:
      - kafka-net
  operator-postgres:
    container_name: operator-postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - operator-vol-postgres:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - kafka-net
  operator-be-lufthansa:
    container_name: operator-be-lufthansa
    build:
      context: ../operator
      dockerfile: Dockerfile
    depends_on:
      - operator-postgres
    ports:
      - "8282:8282"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://operator-postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      airline.iata.code: LH
    links:
      - operator-postgres
    networks:
      - kafka-net
  operator-be-tarom:
    container_name: operator-be-tarom
    build:
      context: ../operator
      dockerfile: Dockerfile
    depends_on:
      - operator-postgres
    ports:
      - "8383:8282"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://operator-postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      airline.iata.code: RO
    links:
      - operator-postgres
    networks:
      - kafka-net
  flight-search-be:
    container_name: flight-search-be
    build:
      context: ../flight-search
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - kafka-net
  notifications-be:
    container_name: notifications-be
    build:
      context: ../notification
      dockerfile: Dockerfile
    depends_on:
      - notifications-mongo_db
    ports:
      - 8090:8084
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://root:123456@notifications-mongo_db:27017/notification_db?authSource=admin"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "broker:9092"
    volumes:
      - payments-db:/data/db
    networks:
      - kafka-net
  notifications-mongo_db:
    image: mongo:latest
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - 7020:27017
    volumes:
      - notification-db:/data/db
    networks:
      - kafka-net
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.20
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - kafka-net
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.20
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - kafka-net
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.20
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
    - kafka-net
volumes:
  booking-db:
  mongo-db:
  admin-postgres-data:
  payments-db:
  operator-vol-postgres:
  notification-db:
  data01:
  data02:
  data03:
networks:
  kafka-net:
    driver: bridge
  host:
    driver: bridge


